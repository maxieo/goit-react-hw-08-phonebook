{"version":3,"file":"static/js/559.5f2d541e.chunk.js","mappings":"0NAAaA,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASA,QAAnB,EACnBC,EAAY,SAAAF,GAAK,OAAIA,EAAMG,MAAV,EACjBC,EAAkB,SAAAJ,GAAK,OAAIA,EAAMC,SAASI,SAAnB,EACvBC,EAAc,SAAAN,GAAK,OAAIA,EAAMC,SAASM,KAAnB,E,kBCEjB,SAASC,IACtB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KAEMC,GAAWC,EAAAA,EAAAA,MACXd,GAAWe,EAAAA,EAAAA,IAAYjB,GAEvBkB,EAAe,SAAAC,GACnB,OAAQA,EAAEC,OAAOT,MACf,IAAK,OACH,OAAOC,EAAQO,EAAEC,OAAOC,OAC1B,IAAK,SACH,OAAOP,EAAUK,EAAEC,OAAOC,OAC5B,QACE,OAEL,EAgBKC,EAAQ,WACZV,EAAQ,IACRE,EAAU,GACX,EAED,OACE,kBAAMS,SApBa,SAAAJ,GAEnB,GADAA,EAAEK,iBAEAtB,EAASuB,MAAK,SAAAC,GACZ,OAAOA,EAAOf,OAASA,CACxB,IAED,OAAOgB,MAAM,GAAD,OAAIhB,EAAJ,4BAEZI,GAASa,EAAAA,EAAAA,IAAW,CAAEjB,KAAAA,EAAME,OAAAA,KAE9BS,GACD,EAQC,WACE,qCAEE,kBACEO,KAAK,OACLlB,KAAK,OACLmB,SAAUZ,EACVG,MAAOV,EACPoB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAIZ,uCAEE,kBACEJ,KAAK,MACLlB,KAAK,SACLmB,SAAUZ,EACVG,MAAOR,EACPkB,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAGZ,mBAAQJ,KAAK,SAAb,2BAGL,CCnED,IAyBA,EAzBoB,SAAC,GAAiB,IAAfK,EAAc,EAAdA,QACfnB,GAAWC,EAAAA,EAAAA,MAIjB,OACE,2BACE,yBACGkB,EAAQvB,KADX,KACmBuB,EAAQrB,WAE3B,mBAAQgB,KAAK,SAASM,QAAS,kBAAeD,EAAQE,QAPxDrB,GAASsB,EAAAA,EAAAA,IAAcH,EAAQE,IAOE,EAA/B,8BAKL,ECfYE,EAAc,WACzB,IAAMpC,GAAWe,EAAAA,EAAAA,IAAYjB,GACvBI,GAASa,EAAAA,EAAAA,IAAYd,GAErBoC,EAAiBrC,EAASE,QAAO,SAAA8B,GACrC,OAAOA,EAAQvB,KAAK6B,cAAcC,SAASrC,EAAOoC,cACnD,IAED,OACE,wBACGD,EAAeG,KAAI,SAAAR,GAAO,OACzB,SAAC,EAAD,CAA8BA,QAASA,GAArBA,EAAQE,GADD,KAKhC,E,SChBYO,EAAS,WACpB,IAAM5B,GAAWC,EAAAA,EAAAA,MACXZ,GAASa,EAAAA,EAAAA,IAAYd,GAO3B,OACE,sDAEE,kBAAO0B,KAAK,OAAOC,SARN,SAAAX,GACf,IAAMyB,EAAczB,EAAEC,OAAOC,MAC7BN,GAAS8B,EAAAA,EAAAA,IAAeD,GACzB,EAK0CvB,MAAOjB,MAGnD,ECTY0C,EAAY,WACvB,IAAM/B,GAAWC,EAAAA,EAAAA,MACXV,GAAYW,EAAAA,EAAAA,IAAYZ,GACxBG,GAAQS,EAAAA,EAAAA,IAAYV,GAO1B,OALAwC,EAAAA,EAAAA,YAAU,WACRhC,GAASiC,EAAAA,EAAAA,MACV,GAAE,CAACjC,KAIF,iCACE,uCACA,SAACN,EAAD,KAEA,4BACE,sCACA,SAACkC,EAAD,IACCrC,IAAcE,IAAS,uCACxB,SAAC8B,EAAD,SAIP,C","sources":["redux/Phonebook/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Phonebook.jsx"],"sourcesContent":["export const getContacts = state => state.contacts.contacts\nexport const getFilter = state => state.filter\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/Phonebook/selectors';\nimport { addContact } from 'redux/Phonebook/operations';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleChange = e => {\n    switch (e.target.name) {\n      case 'name':\n        return setName(e.target.value);\n      case 'number':\n        return setNumber(e.target.value);\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (\n      contacts.find(option => {\n        return option.name === name;\n      })\n    ) {\n      return alert(`${name} is already in contacts`);\n    } else {\n      dispatch(addContact({ name, number }));\n    }\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          onChange={handleChange}\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n\n      <label>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          onChange={handleChange}\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/Phonebook/operations';\n\nconst ContactItem = ({ contact }) => {\n  const dispatch = useDispatch();\n  const onDelete = () => {\n    dispatch(deleteContact(contact.id));\n  };\n  return (\n    <ul>\n      <p>\n        {contact.name}: {contact.number}\n      </p>\n      <button type=\"button\" onClick={() => onDelete(contact.id)}>\n        Delete Contact\n      </button>\n    </ul>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.exact({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n\nexport default ContactItem;\n","import React from 'react';\nimport ContactItem from 'components/ContactItem/ContactItem';\nimport { useSelector } from 'react-redux';\nimport { getFilter, getContacts } from '../../redux/Phonebook/selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  const filterContacts = contacts.filter(contact => {\n    return contact.name.toLowerCase().includes(filter.toLowerCase());\n  });\n\n  return (\n    <ul>\n      {filterContacts.map(contact => (\n        <ContactItem key={contact.id} contact={contact} />\n      ))}\n    </ul>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilterValue } from '../../redux/Phonebook/contactSlice';\nimport { getFilter } from '../../redux/Phonebook/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const onChange = e => {\n    const filterValue = e.target.value;\n    dispatch(setFilterValue(filterValue));\n  };\n\n  return (\n    <label>\n      Find contacts by name\n      <input type=\"text\" onChange={onChange} value={filter} />\n    </label>\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { selectError, selectIsLoading } from 'redux/Phonebook/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/Phonebook/operations';\n\n\nexport const Phonebook = () => { \n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <div>\n        <h2>Contacts</h2>\n        <Filter />\n        {isLoading && !error && <p>Loading...</p>}\n        <ContactList />\n      </div>    \n    </>\n  )\n}"],"names":["getContacts","state","contacts","getFilter","filter","selectIsLoading","isLoading","selectError","error","ContactForm","useState","name","setName","number","setNumber","dispatch","useDispatch","useSelector","handleChange","e","target","value","reset","onSubmit","preventDefault","find","option","alert","addContact","type","onChange","pattern","title","required","contact","onClick","id","deleteContact","ContactList","filterContacts","toLowerCase","includes","map","Filter","filterValue","setFilterValue","Phonebook","useEffect","fetchContacts"],"sourceRoot":""}